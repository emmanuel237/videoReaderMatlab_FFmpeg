classdef videoReader_FFmpeg
    %A class to read (almost) all types of video in Matlab. This class has  been developped as a alternative (and more) to matlab VideoReader object that is sometime buggy under Ubuntu.
    % I also provides all the properties of the input video including the type (I, P, B) of each frame. The class uses FFmpeg to decode and save all the frames of the input video as .bmp files at a specified location  (hard drive) and thus doesn't make usage of the computer's RAM . FFprobe is used to read the properties of the input videos (fps, video bitrate, video resolution, frames type, video rotation parameter).
    % ## class's accessible properties:
    % - file_name: path to the video.
    % -resolution: video's resolution [height, width].
    % -video_bitrate: video bitrate.
    % - frame_rate: frame rate (fps).
    % - rotation_angle: rotation angle.
    % - nber_Iframes: number of I frames.
    % - nber_Pframes: number of P frames.
    % - nber_Bframes:number of B frames.
    % - nber_frames:total number of frames.
    % - frames_type: array giving the type of each frame (I,P,B).
    % - Iframes_indexes: array giving indexes of I frames.
    % - Pframes_indexes: array giving indexes of P frames.
    % - Bframes_indexes: array giving indexes of B frames.
    % - GOPs_structures: array giving the structure of each Group Of Pictures (GOP).
    %
    % ## Class's methods:
    %  -obj(video_path, temp_path): class constructor, recieves the video path and a frames' temporary storage location.
    % All the video's properties are readable after the object's instantiation.
    % -obj.loadToDisk(): decodes the video and saves its frames as .bmp files at the specified location.
    % -[frame] = obj.readFrame(frame_index): reads the frames of specified index.
    % -obj.unloadFromDisk(): frees the space on the hard drive alocated for frames' temporary storage.
    %(C): Emmanuel Kiegaing Kouokam 2019
    %Class's properties
    
    properties (SetAccess=private)
        file_name
    end
    properties (SetAccess=private)
        resolution
    end
    properties (SetAccess=private)
        video_bitrate
    end
    properties (SetAccess=private)
        frame_rate
    end
    properties (SetAccess=private)
        rotation_angle
    end
    properties (SetAccess=private)
        nber_Iframes
    end
    properties (SetAccess=private)
        nber_Pframes
    end
    properties (SetAccess=private)
        nber_Bframes
    end
    properties (SetAccess=private)
        nber_frames
    end
    properties (SetAccess=private)
        frames_type
    end
    properties (SetAccess=private)
        Iframes_indexes
    end
    properties (SetAccess=private)
        Pframes_indexes
    end
    properties (SetAccess=private)
        Bframes_indexes
    end
    properties (SetAccess=private)
        h264_profile
    end
    properties (SetAccess=private)
        GOPs_structure
    end
    
    properties (SetAccess=private)
        frame_storage_location %location for frames temporary storage
    end
    
    
    methods
        function obj = videoReader_FFmpeg(input_vid,storage_loc)
            if nargin == 1 % uses the default storage location
                obj.file_name = input_vid;
                obj.frame_storage_location = './';
            else %uses the specified storage location
                obj.file_name = input_vid;
                fprintf('recieved two arguments\n');
            end
            %reading the video's properties using ffprope
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            %reading the video's H264 profile
            commandText = strcat('ffprobe -v error -show_format -show_streams',[' ' obj.file_name],' > ',obj.file_name(1:length(obj.file_name)-4),'_', 'videoInfos.txt');
            system(commandText);%launching the ffprobe command
            clc;
            textFile = strcat(obj.file_name(1:length(obj.file_name)-4),'_', 'videoInfos.txt');
            %looking for the tag profile in the output file
            fid = fopen(textFile);
            tline = fgetl(fid);
            while ischar(tline)
                if length(strfind(tline,'profile')) > 0
                    obj.h264_profile = tline(9:end);
                    break; %breaking the loop when we find the first occurence of profile
                end
                tline = fgetl(fid);
            end
            fclose(fid);%closing and deleting the temporary text file
            delete(textFile);
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            %       reading the video's rotation parameter %%%%%%%%%%%%%%%%%%%%%%%%
            commandText = strcat('ffprobe -i ',[' ' obj.file_name]);
            textFile = strcat(obj.file_name(1:length(obj.file_name)-4),'_', 'videoInfos.txt');
            diary(textFile);
            system(commandText);%launching the ffprobe command
            diary off;
            clc;
            %looking for the tag profile in the output file
            fid = fopen(textFile);
            tline = fgetl(fid);
            obj.rotation_angle = 0;
            while ischar(tline)
                if length(strfind(tline,'rotate')) > 0
                    obj.rotation_angle = str2num(tline(length(tline)-2:length(tline)));
                    break; %breaking the loop when we find the first occurence of profile
                end
                tline = fgetl(fid);
            end
            fclose(fid);%closing and deleting the temporary text file
            delete(textFile);
            
            %%%%% reading the video frame rate %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            commandText = strcat('ffprobe -v 0 -of csv=p=0 -select_streams v:0 -show_entries stream=r_frame_rate',[' ' obj.file_name]);
            textFile = strcat(obj.file_name(1:length(obj.file_name)-4),'_', 'videoInfos.txt');
            diary(textFile);
            system(commandText);%launching the ffprobe command
            diary off;
            clc;
            fid = fopen(textFile);
            tline = fgetl(fid);
            obj.frame_rate = eval(tline);
            fclose(fid);%closing and deleting the temporary text file
            delete(textFile);
            %%%%%%%%%%%%%%%%%%% read the others video properties
            commandText = strcat('ffprobe -show_frames -select_streams v:0 -show_entries stream=bit_rate',[' ' obj.file_name],' > ',obj.file_name(1:length(obj.file_name)-4),'_', 'videoInfos.txt');
            system(commandText);
            textFile = strcat(obj.file_name(1:length(obj.file_name)-4),'_', 'videoInfos.txt');
            clc %clearing the console to remove messages from system command
            fid = fopen(textFile);%opening the text file
            tline = fgetl(fid);%reading a line in the text file
            %initializing the counter variables
            nbIframes = 0;
            nbPframes = 0;
            nbBframes = 0;
            arrayIndex = 1;
            GOPcount = 0;
            while ischar(tline)
                %looking for the begining of a frame
                if length(strfind(tline,'[FRAME]')) > 0
                    %reading the info up to getting the end of frame marker
                    tline = fgetl(fid);
                    while length(strfind(tline,'[/FRAME]')) == 0
                        %looking for the marker pict_type
                        if length(strfind(tline,'pict_type')) > 0
                            framesType(arrayIndex) = tline(11);%taking the frame's type
                            %checking for the frame's type to count them
                            switch framesType(arrayIndex)
                                case 'I'
                                    nbIframes = nbIframes + 1;
                                    GOPstruct(arrayIndex) = 0;%GOP structure of the video
                                    GOPcount = GOPcount + 1 ;
                                case 'P'
                                    nbPframes = nbPframes + 1;
                                    GOPstruct(arrayIndex) = GOPcount;
                                    
                                case 'B'
                                    nbBframes = nbBframes + 1;
                                    GOPstruct(arrayIndex) = GOPcount;
                            end
                            arrayIndex = arrayIndex + 1;
                        end
                        %extracting the width and heigth of the video file
                        if length(strfind(tline,'width')) > 0
                            width = str2num(tline(7:length(tline)));
                        end
                        
                        if length(strfind(tline,'height')) > 0
                            height = str2num(tline(8:length(tline)));
                        end
                        
                        
                        tline = fgetl(fid);
                    end
                end
                tline = fgetl(fid);%reading a line in the text file
                %Extracting the bitrate of the video stream which is at the end of the
                %produced file
                if length(strfind(tline,'bit_rate')) > 0
                    bitrate = round((str2num(tline(10:length(tline))))/1000);
                end
            end
            %computing the total number of frames in the video
            nbFrames = nbIframes + nbPframes + nbBframes;
            %determining the GOP size
            indices = 1:1:nbFrames;
            Iframes = indices(framesType == 'I');
            %Determining the size of each GOP
            %for n = 1 : length(Iframes) -1
            %     
            %    GOPsize(n) = Iframes(n + 1) - Iframes(n);
                
            % end
            fclose(fid);
            delete(textFile);
            %assigning results to the object's properties
            obj.resolution = [height, width];
            obj.video_bitrate = bitrate;
            obj.nber_Iframes = nbIframes;
            obj.nber_Pframes = nbPframes;
            obj.nber_Bframes = nbBframes;
            obj.nber_frames = nbFrames;
            obj.GOPs_structure = GOPstruct;
            obj.frame
                
        end
        
        function outputArg = method1(obj,inputArg)
            %METHOD1 Summary of this method goes here
            %   Detailed explanation goes here
            outputArg = obj.Property1 + inputArg;
        end
    end
end

